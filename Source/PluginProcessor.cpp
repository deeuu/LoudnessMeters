/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "loudnessCode/Support/AuditoryTools.h"
#include "loudnessCode/Modules/Butter.h"
#include "loudnessCode/Modules/FrameGenerator.h"
#include "loudnessCode/Modules/PowerSpectrum.h"
#include "loudnessCode/Modules/WeightSpectrum.h"
#include "loudnessCode/Modules/FastRoexBank.h"
#include "loudnessCode/Modules/SpecificLoudnessGM.h"
#include "loudnessCode/Modules/IntegratedLoudnessGM.h"


//==============================================================================
LoudnessMeterAudioProcessor::LoudnessMeterAudioProcessor()
{
}

LoudnessMeterAudioProcessor::~LoudnessMeterAudioProcessor()
{
}

//==============================================================================
const String LoudnessMeterAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int LoudnessMeterAudioProcessor::getNumParameters()
{
    return 0;
}

float LoudnessMeterAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void LoudnessMeterAudioProcessor::setParameter (int index, float newValue)
{
}

const String LoudnessMeterAudioProcessor::getParameterName (int index)
{
    return String();
}

const String LoudnessMeterAudioProcessor::getParameterText (int index)
{
    return String();
}

const String LoudnessMeterAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String LoudnessMeterAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool LoudnessMeterAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool LoudnessMeterAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool LoudnessMeterAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool LoudnessMeterAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool LoudnessMeterAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double LoudnessMeterAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int LoudnessMeterAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int LoudnessMeterAudioProcessor::getCurrentProgram()
{
    return 0;
}

void LoudnessMeterAudioProcessor::setCurrentProgram (int index)
{
}

const String LoudnessMeterAudioProcessor::getProgramName (int index)
{
    return String();
}

void LoudnessMeterAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void LoudnessMeterAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    DBG("fs = " + String(sampleRate));
    //set up an input buffer with a default hop size of 4ms
    hopSize = int(sampleRate * 0.004);
    loudnessBuf.initialize(1, hopSize, (int)sampleRate);

    // set the size of our analysis buffer 
    // if I understood you correctly we only need to keep
    // hold of one hop sizes worth of samples at any time
    analysisBuffer.setSize (getNumInputChannels(), hopSize);
    
    // we also have some ints to keep track of where we are writing in the buffer
    samplesNeeded = hopSize;
    writePos = 0;

    //set up butterworth filter
    modules.add(new loudness::Butter(3, 0, 50.0));

    //set up module for generating FFT input buffers
    //Glasberg and Moore use a window size 64ms
    int windowSize = int(sampleRate * 0.064);
    modules.add(new loudness::FrameGenerator(windowSize, hopSize));

    //set up multi-resolution FFT
    loudness::RealVec bands {10, 80, 500, 1250, 2540, 4050, 15001};
    loudness::RealVec windSize {0.064, 0.032, 0.016, 0.008, 0.004, 0.002};
    modules.add(new loudness::PowerSpectrum(bands, windSize, false));

    //set up spectral weighting
    loudness::OME::MiddleEarType middleEar = loudness::OME::ANSI_HPF; //disgusting
    loudness::OME::OuterEarType outerEar = loudness::OME::ANSI_FREE;
    modules.add(new loudness::WeightSpectrum(middleEar, outerEar));

    //excitation pattern
    modules.add(new loudness::FastRoexBank(1.0, false));

    //specific loudness
    modules.add(new loudness::SpecificLoudnessGM);

    //loudness integration
    modules.add(new loudness::IntegratedLoudnessGM);
     
    //initialisation
    modules[0] -> initialize(loudnessBuf);
    for(int i=1; i < modules.size(); i++)
        modules[i] -> initialize(*modules[i-1] -> getOutput());
}

void LoudnessMeterAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void LoudnessMeterAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    int numSamples = buffer.getNumSamples();
    int remainingSamples = numSamples;
    int readPos = 0;

    // deal with any samples in the input which will create full hop buffers for us
    while (remainingSamples >= samplesNeeded)
    {
        for (int channel = 0; channel < getNumInputChannels(); ++channel)
        {
            analysisBuffer.copyFrom (channel, writePos, buffer, channel, readPos, samplesNeeded);
        }

        //================================================================================
        //  Here we can analyse the latest full buffer we have.
        //  If loudness::SignalBank can take a pointer to the samples we can get 
        //  that from analysisBuffer. If not just copy them in in a loop like before.
        //================================================================================

        remainingSamples -= samplesNeeded;
        readPos += samplesNeeded;
        samplesNeeded = hopSize;
        writePos = 0;
    }

    // grab any samples we need to save for the next processBlock call
    if (remainingSamples != 0)
    {
        for (int channel = 0; channel < getNumInputChannels(); ++channel)
        {
            analysisBuffer.copyFrom (channel, writePos, buffer, channel, readPos, remainingSamples);
        }

        samplesNeeded -= remainingSamples;
    }
}

//==============================================================================
bool LoudnessMeterAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* LoudnessMeterAudioProcessor::createEditor()
{
    return new LoudnessMeterAudioProcessorEditor (*this);
}

//==============================================================================
void LoudnessMeterAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void LoudnessMeterAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new LoudnessMeterAudioProcessor();
}
