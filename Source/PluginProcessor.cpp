/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
LoudnessMeterAudioProcessor::LoudnessMeterAudioProcessor()
{
}

LoudnessMeterAudioProcessor::~LoudnessMeterAudioProcessor()
{
}

//==============================================================================
const String LoudnessMeterAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int LoudnessMeterAudioProcessor::getNumParameters()
{
    return 0;
}

float LoudnessMeterAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void LoudnessMeterAudioProcessor::setParameter (int index, float newValue)
{
}

const String LoudnessMeterAudioProcessor::getParameterName (int index)
{
    return String();
}

const String LoudnessMeterAudioProcessor::getParameterText (int index)
{
    return String();
}

const String LoudnessMeterAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String LoudnessMeterAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool LoudnessMeterAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool LoudnessMeterAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool LoudnessMeterAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool LoudnessMeterAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool LoudnessMeterAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double LoudnessMeterAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int LoudnessMeterAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int LoudnessMeterAudioProcessor::getCurrentProgram()
{
    return 0;
}

void LoudnessMeterAudioProcessor::setCurrentProgram (int index)
{
}

const String LoudnessMeterAudioProcessor::getProgramName (int index)
{
    return String();
}

void LoudnessMeterAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void LoudnessMeterAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    inputBuf.initialize(1,1,44100);
}

void LoudnessMeterAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void LoudnessMeterAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    //A stupid test to make sure were up and running
    inputBuf.setSample(0,0,0.01);
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);

        for(int sample =0; sample<buffer.getNumSamples(); sample++)
            channelData[sample] *= inputBuf.getSample(0,0);

        // ..do something to the data...
    }
}

//==============================================================================
bool LoudnessMeterAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* LoudnessMeterAudioProcessor::createEditor()
{
    return new LoudnessMeterAudioProcessorEditor (*this);
}

//==============================================================================
void LoudnessMeterAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void LoudnessMeterAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new LoudnessMeterAudioProcessor();
}
