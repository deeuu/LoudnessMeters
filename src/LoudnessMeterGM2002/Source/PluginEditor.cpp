/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
LoudnessMeterAudioProcessorEditor::LoudnessMeterAudioProcessorEditor (LoudnessMeterAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p),
      loudnessValues (processor.getPointerToLoudnessValues()),
      settingsScreen (processor.getLoudnessParameters())
{
    setSize (400, 320);
    
    addAndMakeVisible (barGraph);
    barGraph.setGraduationColour (Colours::lightgrey);
    barGraph.setPhonsRange (40, 120);
    barGraph.setBounds (300, 20, 80, 260);
    
    addAndMakeVisible (specificLoudness);
    specificLoudness.setGraduationColour (Colours::lightgrey);
    specificLoudness.setBounds (10, 20, 280, 260);
    
    addAndMakeVisible (settingsButton);
    settingsButton.setBounds (355, getHeight() - 35, 25, 25);
    settingsButton.addListener (this);
    
    addAndMakeVisible (settingsScreen);
    settingsScreen.setBounds (0, getHeight(), getWidth(), 70);
    settingsScreen.submitButton.addListener (this);
    
    startTimer (50);
}

LoudnessMeterAudioProcessorEditor::~LoudnessMeterAudioProcessorEditor()
{
}

//==============================================================================
void LoudnessMeterAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::darkgrey);
}

void LoudnessMeterAudioProcessorEditor::resized()
{
}

void LoudnessMeterAudioProcessorEditor::buttonClicked (Button *buttonThatWasClicked)
{
    if (buttonThatWasClicked == &settingsButton)
    {
        showSettings();
    }
    else if (buttonThatWasClicked == &(settingsScreen.submitButton))
    {
        hideSettings();
        processor.setLoudnessParameters (settingsScreen.getLoudnessParameters());
    }
}

void LoudnessMeterAudioProcessorEditor::timerCallback()
{
    if (processor.loudnessValuesReady())
    {
        barGraph.setMeterLevels (loudnessValues->leftSTL, loudnessValues->leftLTL, loudnessValues->rightSTL, loudnessValues->rightLTL);
        specificLoudness.setSpecificLoudnessValues (loudnessValues->centreFrequencies, loudnessValues->leftSpecificLoudness, loudnessValues->rightSpecificLoudness);
        
        processor.updateLoudnessValues();
    }
}

void LoudnessMeterAudioProcessorEditor::showSettings()
{
    animator.animateComponent (&settingsScreen,
                               Rectangle <int> (0, getHeight() - 80, getWidth(), 80),
                               1.0f, 1000, false, 0.0, 0.0);
}

void LoudnessMeterAudioProcessorEditor::hideSettings()
{
    animator.animateComponent (&settingsScreen,
                               Rectangle <int> (0, getHeight(), getWidth(), 80),
                               1.0f, 1000, false, 0.0, 0.0);
    repaint();
}
