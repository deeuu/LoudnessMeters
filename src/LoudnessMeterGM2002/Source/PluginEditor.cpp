/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
LoudnessMeterAudioProcessorEditor::LoudnessMeterAudioProcessorEditor (LoudnessMeterAudioProcessor& p)
    : AudioProcessorEditor (&p),
      processor (p),
      loudnessValues (processor.getPointerToLoudnessValues()),
      settingsButton (Colours::blue),
      calibrationButton (Colours::red),
      settingsScreen (processor.getLoudnessParameters())
{
    setSize (430, 310);
    
    addAndMakeVisible (barGraph);
    barGraph.setGraduationColour (Colours::lightgrey);
    barGraph.setPhonsRange (40, 120);
    barGraph.setBounds (330, 20, 80, 260);
    
    addAndMakeVisible (specificLoudness);
    specificLoudness.setGraduationColour (Colours::lightgrey);
    specificLoudness.setBounds (10, 9, 320, 258);
    
    addAndMakeVisible (settingsButton);
    settingsButton.setBounds (385, 280, 20, 20);
    settingsButton.addListener (this);

    addAndMakeVisible (calibrationButton);
    calibrationButton.setBounds (330, 280, 20, 20);
    calibrationButton.addListener (this);
    
    addAndMakeVisible (settingsScreen);
    settingsScreen.setBounds (0, getHeight(), getWidth(), 70);
    settingsScreen.submitButton.addListener (this);
    oldLoudnessParameters = settingsScreen.getLoudnessParameters();

    addAndMakeVisible (calibrationScreen);
    calibrationScreen.setBounds (0, getHeight(), getWidth(), 70);
    calibrationScreen.submitButton.addListener (this);
    calibrationScreen.calibrateButton.addListener (this);
    
    startTimer (50);
}

LoudnessMeterAudioProcessorEditor::~LoudnessMeterAudioProcessorEditor()
{
}

//==============================================================================
void LoudnessMeterAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::darkgrey);
}

void LoudnessMeterAudioProcessorEditor::resized()
{
}

void LoudnessMeterAudioProcessorEditor::buttonClicked (Button *buttonThatWasClicked)
{
    if (buttonThatWasClicked == &settingsButton)
    {
        //Show the settings screen to allow model config
        showSettings(settingsScreen);
    }
    else if (buttonThatWasClicked == &(settingsScreen.submitButton))
    {
        hideSettings (settingsScreen);

        //Get the new params from GUI
        LoudnessParameters newLoudnessParameters = settingsScreen.getLoudnessParameters();

        //Update only if a parameter has changed
        if (newLoudnessParameters.modelRate != oldLoudnessParameters.modelRate ||
            newLoudnessParameters.camSpacing != oldLoudnessParameters.camSpacing ||
            newLoudnessParameters.compression != oldLoudnessParameters.compression ||
            newLoudnessParameters.filter != oldLoudnessParameters.filter)
        {
            processor.setLoudnessParameters (newLoudnessParameters);
            oldLoudnessParameters = newLoudnessParameters;
        }
    }
    else if (buttonThatWasClicked == &calibrationButton)
    {
        //shoow calibraton screen to allow calibration
        showSettings(calibrationScreen);
    }
    else if (buttonThatWasClicked == &(calibrationScreen.calibrateButton))
    {
        processor.calibrate (calibrationScreen.getMeasuredLevels());
    }
    else if (buttonThatWasClicked == &(calibrationScreen.submitButton))
    {
        hideSettings (calibrationScreen);
    }
}

void LoudnessMeterAudioProcessorEditor::timerCallback()
{
    if (processor.loudnessValuesReady())
    {
        barGraph.setMeterLevels (loudnessValues->leftSTL,
                                 loudnessValues->leftLTL,
                                 loudnessValues->rightSTL,
                                 loudnessValues->rightLTL);
        specificLoudness.setSpecificLoudnessValues (loudnessValues->centreFrequencies, 
                                                    loudnessValues->leftSpecificLoudness,
                                                    loudnessValues->rightSpecificLoudness);
        
        processor.updateLoudnessValues();
    }
}

void LoudnessMeterAudioProcessorEditor::showSettings (Component &screenToShow)
{
    animator.animateComponent (&screenToShow,
                               Rectangle <int> (0, getHeight() - 80, getWidth(), 80),
                               1.0f, 1000, false, 0.0, 0.0);
}

void LoudnessMeterAudioProcessorEditor::hideSettings (Component &screenToHide)
{
    animator.animateComponent (&screenToHide,
                               Rectangle <int> (0, getHeight(), getWidth(), 80),
                               1.0f, 1000, false, 0.0, 0.0);
    repaint();
}
